
CREATE TABLE Business (
	BusinessId char(22), 
	Name varchar(100) NOT NULL,
	Address varchar(80) NOT NULL,
	City varchar(30) NOT NULL,
	State char(2) NOT NULL,
	PostalCode char(5),
	Stars numeric(3,1),
	ReviewCount int,
	NumCheckins int DEFAULT 0,
	ReviewRating numeric(3,1) DEFAULT 0.0,
	PRIMARY KEY (BusinessId),
	FOREIGN KEY (PostalCode) REFERENCES Public.PostalCode(PostalCode)
);

CREATE TABLE Category (
	CategoryId int GENERATED BY DEFAULT AS IDENTITY, 
	CategoryName varchar(40) Unique,
	PRIMARY KEY (CategoryId)
);

CREATE TABLE BusinessCategory (
	BusinessId char(22) NOT NULL,
	CategoryId int NOT NULL,
	PRIMARY KEY (BusinessId, CategoryId),
	FOREIGN KEY (BusinessId) REFERENCES Public.Business(BusinessId),
	FOREIGN KEY (CategoryId) REFERENCES Public.Category(CategoryId)
);

CREATE TABLE Attribute (
	AttributeId int GENERATED BY DEFAULT AS IDENTITY, 
	AttributeName varchar(40) Unique,
	PRIMARY KEY (AttributeId)
);

CREATE TABLE BusinessAttribute (
	BusinessId char(22) NOT NULL,
	AttributeId int NOT NULL,
	AttributeValue varchar(30),
	PRIMARY KEY (BusinessId, AttributeId),
	FOREIGN KEY (BusinessId) REFERENCES Public.Business(BusinessId),
	FOREIGN KEY (AttributeId) REFERENCES Public.Attribute(AttributeId)
);

CREATE TABLE BusinessCheckin (
	BusinessId char(22) NOT NULL,  
	CheckinWeekDay varchar(10),
	CheckinHour varchar(5),
	CheckinCount smallint,
	FOREIGN KEY (BusinessId) REFERENCES Public.Business(BusinessId)
);

CREATE TABLE Users (
	UserId char(22), 
	Name varchar(30),
	YelpingSince varchar(10),
	ReviewCount int,
	Fans smallint,
	AverageStars numeric(3,1),
	Funny int,
	Useful int,
	Cool int,
	PRIMARY KEY (UserId)
);

CREATE TABLE UserFriends (
	UserId char(22) NOT NULL,  
	FriendId char(22) NOT NULL,  
	PRIMARY KEY (UserId, FriendId),
	FOREIGN KEY (UserId) REFERENCES Public.Users(UserId)
);

CREATE TABLE Review (
	ReviewId char(22),  
	Stars smallint,
	ReviewDate varchar(10),
	Text varchar(1200),
	Useful smallint,
	Funny smallint,
	Cool smallint,
	PRIMARY KEY (ReviewId)
);

CREATE TABLE BusinessReview (
	ReviewId char(22),  
	UserId char(22) NOT NULL, 
	BusinessId char(22) NOT NULL, 
	PRIMARY KEY (ReviewId,UserId,BusinessId),
	FOREIGN KEY (ReviewId) REFERENCES Public.Review(ReviewId),
	FOREIGN KEY (UserId) REFERENCES Public.Users(UserId),
	FOREIGN KEY (BusinessId) REFERENCES Public.Business(BusinessId)
);

CREATE TABLE PostalCode (
	PostalCode char(5),
	MedianIncome int NULL,
	MeanIncome int NULL,
	Population int NULL,
	PRIMARY KEY (PostalCode)
);

CREATE INDEX IF NOT EXISTS pk_businessid
    ON public.business USING btree
    (businessid COLLATE pg_catalog."default" ASC NULLS LAST)
    TABLESPACE pg_default;
	
CREATE INDEX IF NOT EXISTS ix_businessid_categoryid
    ON public.businesscategory USING btree
    (categoryid ASC NULLS LAST, businessid COLLATE pg_catalog."default" ASC NULLS LAST)
    TABLESPACE pg_default;
	
CREATE INDEX IF NOT EXISTS ix_businessid_reviewid
    ON public.businessreview USING btree
    (reviewid COLLATE pg_catalog."default" ASC NULLS LAST, businessid COLLATE pg_catalog."default" ASC NULLS LAST)
    TABLESPACE pg_default;
	
CREATE INDEX IF NOT EXISTS pk_reviewid
    ON public.review USING btree
    (reviewid COLLATE pg_catalog."default" ASC NULLS LAST)
    TABLESPACE pg_default;
